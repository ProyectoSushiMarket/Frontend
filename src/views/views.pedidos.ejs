<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pedidos</title>
  <link rel="stylesheet" href="/css/pedidos.css">

  <!-- Validaci√≥n del token -->
  <script>
    const token = sessionStorage.getItem("token");
        if (!token) {
            window.location.href = "/";
        }

        async function obtenerDatosProveedor() {
            const url = sessionStorage.getItem("urltiendaverduras") + "/login/datosusuario";
            try {
                const response = await fetch(url, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "x-access-token": token
                    }
                });

                if (!response.ok) throw new Error("No se pudo obtener la informaci√≥n del proveedor");

                const data = await response.json();
                if (data.error) {
                    window.location.href = "/";
                } else {
                    sessionStorage.setItem("proveedorId", data.id_usuario);
                    sessionStorage.setItem("proveedorNombre", data.nombre);
                    document.getElementById("proveedor-nombre-header").textContent = data.nombre;
                }
            } catch (error) {
                console.error("Error al obtener los datos del proveedor:", error);
                window.location.href = "/";
            }
        }

        document.addEventListener("DOMContentLoaded", obtenerDatosProveedor);
  </script>

  <script>
    const CerrarSesion = () => {
        sessionStorage.setItem("token", "");
        window.location.href = "/";
    }
  </script>
</head>
<body>
  <header class="navbar">
    <div class="logo">Tienda Verduras</div>
    <div class="login-icon">Perfil üë§: <span id="proveedor-nombre-header">PROVEEDOR</span></div>
    <button class="CerrarSesion-button" onclick="CerrarSesion()">Cerrar Sesi√≥n</button>
  </header>

  <section class="search-bar">
    <input type="text" id="searchBar" placeholder="Buscar...">
  </section>
  
  <main class="main-content">
    <div class="cart-content">
      <div class="empty-cart" id="empty-cart">
        <p>No tienes pedidos a√∫n</p>
      </div>
      
      <div class="product-list" id="product-list" style="display: none;">
        <div class="table-container">
          <h2 class="table-title">Pedidos
            <button class="eliminarpedido" onclick="abrirModalEliminar()">Eliminar Pedido</button>
          </h2>
          
          <table>
            <thead>
              <tr>
                <th>ID Pedido</th>
                <th>Usuario</th>
                <th>Responsable</th>
                <th>Producto</th>
                <th>Fecha Pedido</th>
                <th>Cantidad</th>
                <th>Unidad de Medida</th>
                <th>Caracter√≠sticas</th>
              </tr>
            </thead>
            <tbody id="pedido-rows">
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </main>
  
  <script>
    async function cargarPedidos() {
      const apiURL = "http://localhost:4100/pedido";
      const token = sessionStorage.getItem("token");

      try {
        const response = await fetch(apiURL, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "x-access-token": token
          }
        });

        if (!response.ok) throw new Error("Error al cargar los pedidos");

        const pedidos = await response.json();
        const userData = JSON.parse(atob(token.split('.')[1]));
        const userRole = userData.rol;
        const userId = userData.usuario;

        const pedidoRows = document.getElementById("pedido-rows");
        const productList = document.getElementById("product-list");
        const emptyCart = document.getElementById("empty-cart");

        pedidoRows.innerHTML = "";

        if (pedidos.length === 0) {
          emptyCart.style.display = "block";
          productList.style.display = "none";
        } else {
          emptyCart.style.display = "none";
          productList.style.display = "block";

          // Filtrar pedidos seg√∫n el rol del usuario (Proveedor o cliente)
          let filteredPedidos = userRole === "Proveedor"
            ? pedidos
            : pedidos.filter(pedido => pedido.id_usuario === userId);

          filteredPedidos.forEach(pedido => {
            const fecha = new Date(pedido.fecha_pedido);
            const fechaFormateada = fecha.toLocaleString("es-ES", {
              year: "numeric", month: "2-digit", day: "2-digit"
            });

            // Crear fila de pedido en la tabla
            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${pedido.id_pedido}</td>
              <td>${pedido.nombre_usuario || "Desconocido"}</td>
              <td>${pedido.responsable || "Sin responsable"}</td>
              <td>${pedido.nombre_producto || "Desconocido"}</td>
              <td>${fechaFormateada}</td>
              <td>${pedido.cantidad}</td>
              <td>${pedido.unidad_de_medida}</td>
              <td>${pedido.caracteristicas || "No especificadas"}</td>
            `;
            pedidoRows.appendChild(row);
          });
        }
      } catch (error) {
        console.error("Error al cargar los pedidos:", error);
        alert("No se pudieron cargar los pedidos.");
      }
    }

    function filterPedidosRealtime() {
      const searchInput = document.getElementById("searchBar").value.toLowerCase();
      const pedidoRows = document.querySelectorAll("#pedido-rows tr");
      let found = false;

      pedidoRows.forEach(row => {
        const productName = row.querySelector("td:nth-child(4)").textContent.toLowerCase();
        const userName = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
        if (productName.includes(searchInput) || userName.includes(searchInput)) {
          row.style.display = "table-row";
          found = true;
        } else {
          row.style.display = "none";
        }
      });

      if (!found) {
        const noResultsMessage = document.getElementById("noResults");
        if (!noResultsMessage) {
          const message = document.createElement("p");
          message.id = "noResults";
          message.textContent = "No se encontraron pedidos";
          message.style.textAlign = "center";
          document.querySelector(".table-container").appendChild(message);
        }
      } else {
        const noResultsMessage = document.getElementById("noResults");
        if (noResultsMessage) noResultsMessage.remove();
      }
    }

    document.getElementById("searchBar").addEventListener("input", filterPedidosRealtime);

        async function eliminarPedido() {
      const idPedido = document.getElementById("idPedido").value.trim();

      if (!idPedido) {
        alert("Por favor, ingrese un ID v√°lido.");
        return;
      }

      const apiURL = `http://localhost:4100/pedido/${idPedido}`;

      try {
        const response = await fetch(apiURL, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            "x-access-token": sessionStorage.getItem("token")
          }
        });

        if (response.ok) {
          alert("Pedido eliminado exitosamente.");
          cerrarModalEliminar();
          cargarPedidos();
          
          // Limpiar el campo de ID despu√©s de eliminar
          document.getElementById("idPedido").value = '';  // Reinicia el campo ID
        } else {
          const error = await response.json();
          alert(`Error al eliminar el pedido: ${error.message}`);
        }
      } catch (error) {
        console.error("Error al eliminar el pedido:", error);
        alert("No se pudo eliminar el pedido.");
      }
    }


    function abrirModalEliminar() {
      document.getElementById("modalEliminar").style.display = "block";
    }

    function cerrarModalEliminar() {
      document.getElementById("modalEliminar").style.display = "none";
    }

    cargarPedidos();
  </script>

  <!-- Modal para eliminar pedido -->
  <div id="modalEliminar" class="modal">
    <div class="modal-content">
      <span class="close" onclick="cerrarModalEliminar()">&times;</span>
      <h2>Eliminar Pedido</h2>
      <p>Ingrese el ID del pedido que desea eliminar:</p>
      <input type="text" id="idPedido" placeholder="ID del pedido">
      <div class="modal-actions">
        <button class="cancelar" onclick="eliminarPedido()">Aceptar</button>
        <button class="confirmar" onclick="cerrarModalEliminar()">Cancelar</button>
      </div>
    </div>
  </div>
</body>
</html>
